/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mvpjava.interfaceTutorial.electricity;

import com.mvpjava.interfaceTutorial.exceptions.NoElectricityRuntimeException;
import static com.googlecode.catchexception.CatchException.caughtException;
import java.util.Random;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static com.googlecode.catchexception.CatchException.catchException;

/**
 *
 * @author aluis
 */
public class HydroElectricityProviderImplTest {

    HydroElectricityProviderImpl hydroImpl; // mock
    Random electricitySimulator; //DOC
    int MAX_VALUE;

    @Before
    public void setUp() {
        hydroImpl = new HydroElectricityProviderImpl();
        electricitySimulator = mock(Random.class);
        hydroImpl.setElectricitySimulator(electricitySimulator);//water power source no longer available
        MAX_VALUE = hydroImpl.getMaxRangeValue();
    }

    @Test
    public void shouldThrowExceptionWhenPowerSourceNotAvailable() {
        int valueSimulatingPowerOutage = hydroImpl.getValueCausingPowerOutage(); //no electricity

        when(electricitySimulator.nextInt(MAX_VALUE)).thenReturn(valueSimulatingPowerOutage);

        catchException(hydroImpl).provideElectricity();
        assertTrue("Should have thrown an exception when no electricity is available",
                caughtException() instanceof NoElectricityRuntimeException);
    }

    @Test
    public void shouldReturnElectricityWhenPowerSourceIsAvailable() {
        int valueSimulatingElectricity = this.getValueProvidingElectricity();

        when(electricitySimulator.nextInt(MAX_VALUE)).thenReturn(valueSimulatingElectricity);

        assertNotNull("Should have returned Electricity since power source is available",
                hydroImpl.provideElectricity());
    }

    @Test
    public void shouldReturnProvidersPowerSourceDetails() {
        String actualPowerSourceDetails = hydroImpl.getPowerSourceDetails();
        String expectedPowerSourceDetails = "Electricity generated by Hyrdo-Electric Dam";
        assertEquals("Power Source should have been equal to ["
                + expectedPowerSourceDetails + "]",
                expectedPowerSourceDetails, actualPowerSourceDetails);
    }

    //////////////////////////// PRIVATE //////////////////////////////////
    private int getValueProvidingElectricity() {
        //change it off by 1 to get value necessary to generate electricity
        return hydroImpl.getValueCausingPowerOutage() + 1;
    }
}
