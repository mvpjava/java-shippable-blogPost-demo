/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mvpjava.interfaceTutorial.electricity;

import com.mvpjava.interfaceTutorial.exceptions.NoElectricityRuntimeException;
import static com.googlecode.catchexception.CatchException.caughtException;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static com.googlecode.catchexception.CatchException.catchException;
import static org.assertj.core.api.Assertions.*;

/**
 *
 * @author aluis
 */
public class NuclearElectricityProviderImplTest {

    NuclearElectricityProviderImpl powerPlant; //SUT
    Mass amountOfPlutonium; //DOC
    final long ZERO_KILLOGRAM = 0;
    final long ONE_HUNDER_KILLOGRAM = 100;

    @Before
    public void setUp() {
        amountOfPlutonium = mock(Mass.class);
        powerPlant = new NuclearElectricityProviderImpl(amountOfPlutonium);
    }

    @Test
    public void shouldThrowExceptionWhenPowerSourceNotAvailable() {
        when(amountOfPlutonium.getWeight()).thenReturn(ZERO_KILLOGRAM);

        catchException(powerPlant).provideElectricity();
        assertTrue("Should have thrown an exception when no electricity is available",
                caughtException() instanceof NoElectricityRuntimeException);
    }

    @Test
    public void shouldReturnElectricityWhenPowerSourceIsAvailable() {
        when(amountOfPlutonium.getWeight()).thenReturn(ONE_HUNDER_KILLOGRAM);
//        assertNotNull("Should have returned Electricity since power source is available",
//                powerPlant.provideElectricity());      
        assertThat(powerPlant.provideElectricity()).isNotNull();
    }

    @Test
    public void shouldThrowExceptionWhenMassIsNull() {
        try {
            NuclearElectricityProviderImpl powerPlanWithNoPlutonium = new NuclearElectricityProviderImpl(null);
//            fail("Should have thrown exception when null Mass is injected");
            fail();
        } catch (NullPointerException npe) {
            assertThat(npe).isExactlyInstanceOf(NullPointerException.class);

        }
    }

    @Test
    public void shouldReturnProvidersPowerSourceDetails() {
        String actualPowerSourceDetails = powerPlant.getPowerSourceDetails();
        String expectedPowerSourceDetails = "Electricity generated by Nuclean Fission with Plutonium-238";
//        assertEquals("Power Source should have been equal to ["
//                + expectedPowerSourceDetails + "]",
//                expectedPowerSourceDetails, actualPowerSourceDetails);
        assertThat(actualPowerSourceDetails).isEqualToIgnoringCase(expectedPowerSourceDetails);
    }
}
