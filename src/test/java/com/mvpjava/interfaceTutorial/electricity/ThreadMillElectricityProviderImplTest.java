/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mvpjava.interfaceTutorial.electricity;

import com.mvpjava.interfaceTutorial.time.SystemTime;
import static com.googlecode.catchexception.CatchException.catchException;
import static com.googlecode.catchexception.CatchException.caughtException;
import com.mvpjava.interfaceTutorial.exceptions.NoElectricityRuntimeException;
import java.time.LocalTime;
import junitparams.JUnitParamsRunner;
import junitparams.Parameters;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.runner.RunWith;
import static org.mockito.Mockito.*;
import static org.assertj.core.api.Assertions.*;
/**
 *
 * @author aluis
 */
@RunWith(JUnitParamsRunner.class)
public class ThreadMillElectricityProviderImplTest {

    ThreadMillElectricityProviderImpl threadMillImpl; //SUT
    SystemTime systemTime; //DOC

    /* For parameterized test: return a LocalTime object with an hour
       in which electricity is assured to be availeble
     */
    private static Object[] getHourThatProducesElectricity() {
        return new Object[]{
            new Object[]{LocalTime.of(0, 0)},
            new Object[]{LocalTime.of(1, 0)},
            new Object[]{LocalTime.of(2, 0)},
            new Object[]{LocalTime.of(3, 0)},
            new Object[]{LocalTime.of(4, 0)},
            new Object[]{LocalTime.of(5, 0)},
            new Object[]{LocalTime.of(6, 0)},
            new Object[]{LocalTime.of(7, 0)},
            new Object[]{LocalTime.of(8, 0)},
            new Object[]{LocalTime.of(9, 0)},
            new Object[]{LocalTime.of(10, 0)},
            new Object[]{LocalTime.of(11, 0)},
            // new Object[]{LocalTime.of(12, 0)}, Lunch not used since no Electricity ay this time
            new Object[]{LocalTime.of(13, 0)},
            new Object[]{LocalTime.of(14, 0)},
            new Object[]{LocalTime.of(15, 0)},
            new Object[]{LocalTime.of(16, 0)},
            new Object[]{LocalTime.of(17, 0)},
            new Object[]{LocalTime.of(18, 0)},
            new Object[]{LocalTime.of(19, 0)},
            new Object[]{LocalTime.of(20, 0)},
            new Object[]{LocalTime.of(21, 0)},
            new Object[]{LocalTime.of(22, 0)},
            new Object[]{LocalTime.of(23, 0)},};
    }

    @Before
    public void setUp() {
        threadMillImpl = new ThreadMillElectricityProviderImpl();
        systemTime = mock(SystemTime.class);

    }

    @Test
    public void shouldThrowExceptionWhenPowerSourceNotAvailableAtLunch() {
        //implementation does not have anybody running on threadmill at noon
        //to preoduce electricity
        when(systemTime.asLocalTime()).thenReturn(getSystemLunchTime());
        threadMillImpl.setSystemTime(systemTime);
        catchException(threadMillImpl).provideElectricity();
        assertTrue("Should have thrown an exception since no electricity is available at lunch time",
                caughtException() instanceof NoElectricityRuntimeException);                
    }

    @Test
    @Parameters(method = "getHourThatProducesElectricity")
    public void shouldGenerateElectricityForAllHoursExceptAtLunch(LocalTime hourProducingElectricy) {

        when(systemTime.asLocalTime()).thenReturn(hourProducingElectricy);
        threadMillImpl.setSystemTime(systemTime);
        catchException(threadMillImpl).provideElectricity();
        assertThat(threadMillImpl.provideElectricity()).isNotNull();
    }

    @Test
    public void shouldReturnProvidersPowerSourceDetails() {
        String actualPowerSourceDetails = threadMillImpl.getPowerSourceDetails();
        String expectedPowerSourceDetails = "Electricity generated by Human running on threadmill";
        //AssertJ Fluent assertions
        assertThat(actualPowerSourceDetails).isEqualToIgnoringCase(expectedPowerSourceDetails);
    }

    private LocalTime getSystemLunchTime() {
        return LocalTime.NOON;
    }
}
