/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mvpjava.interfaceTutorial.electricity;

import com.mvpjava.interfaceTutorial.exceptions.NoElectricityRuntimeException;
import java.util.Random;

/**
 *
 * @author aluis
 */
public class HydroElectricityProviderImpl implements ElectricityProvider {

    // if water is flowing over he dam then we have hyro power
    private boolean waterFlowing; //AKA; the implementations power source
    private final Electricity electricity = new Electricity();

    //will simulate gernerated electricty when power source is available
    private Random electricitySimulator; //determines/simulates when power source if available
    private final int MAX_RANGE_VAL = 1000 + 1; //rangge will be 0 to 1000 (inclusive)
    private final int VALUE_CAUSING_POWER_OUTAGE = 42; // will cause a power outage when equal

    public HydroElectricityProviderImpl() {
        this.electricitySimulator = new Random();
    }

    @Override
    public Electricity provideElectricity() throws NoElectricityRuntimeException {
        if (!isWaterFlowing()) {
            throw new NoElectricityRuntimeException("Water is no longer flowing over dam, No more electricity!");
        }
        return this.getElectricity();
    }

    /* Only use for testing purposes since one is automatically created when constructed */
    void setElectricitySimulator(Random electricitySimulator) {
        this.electricitySimulator = electricitySimulator;
    }

    //used mostly for tests
    int getMaxRangeValue() {
        return MAX_RANGE_VAL;
    }

    //used mostly for tests
    int getValueCausingPowerOutage() {
        return VALUE_CAUSING_POWER_OUTAGE;
    }

    private boolean isWaterFlowing() {
        //as long as the random number is not equal to the magic number then we have a power source
        //in which to provide s with Electricity
        waterFlowing = (electricitySimulator.nextInt(MAX_RANGE_VAL) != VALUE_CAUSING_POWER_OUTAGE);
        return waterFlowing;
    }

    private Electricity getElectricity() {
        return electricity;
    }

    @Override
    public String getPowerSourceDetails() {
        return "Electricity generated by Hyrdo-Electric Dam";
    }
}
